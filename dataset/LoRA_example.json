{
  "version": "1.0",
  "description": "Instruction dataset for LoRA fine-tuning with diverse task types",
  "data": [
    {
      "id": "task_001",
      "type": "math_reasoning",
      "instruction": "解决以下数学问题。请先写出解题思路，然后逐步计算得出结果。",
      "input": "小明开了一家玩具店。他以80元的进价购入了12个玩具熊，以120元的价格售出。请计算他的总利润。",
      "output": "让我逐步解决这个问题：\n\n1. 首先计算总成本：\n   - 每个玩具熊进价 = 80元\n   - 购入数量 = 12个\n   - 总成本 = 80 × 12 = 960元\n\n2. 然后计算总收入：\n   - 售价 = 120元\n   - 售出数量 = 12个\n   - 总收入 = 120 × 12 = 1440元\n\n3. 最后计算利润：\n   - 利润 = 总收入 - 总成本\n   - 利润 = 1440 - 960 = 480元\n\n因此，小明的总利润是480元。"
    },
    {
      "id": "task_002", 
      "type": "logical_reasoning",
      "instruction": "分析以下逻辑推理问题。请先给出初步推理，然后复查推理过程，最后得出结论。",
      "input": "前提：所有的鸟都会飞。企鹅是鸟。问题：企鹅会飞吗？",
      "output": "让我分两个阶段来分析这个问题：\n\n初步推理阶段：\n1. 已知前提一：所有的鸟都会飞\n2. 已知前提二：企鹅是鸟\n3. 根据三段论，如果所有鸟都会飞，且企鹅是鸟，那么企鹅应该会飞\n\n复查阶段：\n1. 检查前提一的正确性：「所有的鸟都会飞」这个前提是错误的\n2. 实际上有许多鸟类不会飞，如：\n   - 企鹅\n   - 鸵鸟\n   - 几维鸟\n3. 因此，原始前提存在逻辑错误\n\n结论：\n虽然按照给定前提可以推导出「企鹅会飞」的结论，但由于前提一本身是错误的，所以这个推理虽然逻辑上正确，但结论与现实不符。实际上，企鹅是不会飞的鸟类。"
    },
    {
      "id": "task_003",
      "type": "text_analysis",
      "instruction": "分析下面这段文字，找出主要论点和支持论据。",
      "input": "近年来，远程工作越来越普及。研究表明，远程工作不仅能提高员工生产力，还能帮助公司节省办公成本。根据一项针对500家公司的调查，实行远程办公的企业平均节省了30%的办公场地支出，同时员工满意度提升了25%。",
      "output": "让我分析这段文字：\n\n主要论点：\n远程工作正在变得普及，且具有多重好处。\n\n支持论据：\n1. 提高员工生产力\n2. 节省公司办公成本\n   - 具体数据：平均节省30%办公场地支出\n3. 提升员工满意度\n   - 具体数据：员工满意度提升25%\n\n论据分析：\n- 使用了具体的调查数据（500家公司）来支持论点\n- 提供了明确的数据支持（30%和25%）\n- 从多个角度（成本、效率、满意度）论证远程工作的优势\n\n结论：\n这段文字通过具体数据和多角度分析有效地支持了远程工作普及的观点。"
    },
    {
      "id": "task_004",
      "type": "code_explanation",
      "instruction": "解释以下Python代码的功能，并说明其中的关键部分。",
      "input": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
      "output": "这是一个计算斐波那契数列的递归函数，让我来解释其工作原理：\n\n1. 函数结构：\n   - 函数名：fibonacci\n   - 参数：n（表示要计算第n个斐波那契数）\n\n2. 关键部分解释：\n   - 基本情况（Base case）：\n     ```python\n     if n <= 1:\n         return n\n     ```\n     当n=0时返回0，n=1时返回1\n\n   - 递归情况：\n     ```python\n     return fibonacci(n-1) + fibonacci(n-2)\n     ```\n     计算第n个数时，将返回前两个数的和\n\n3. 工作流程示例（计算fibonacci(3)）：\n   - fibonacci(3) = fibonacci(2) + fibonacci(1)\n   - fibonacci(2) = fibonacci(1) + fibonacci(0)\n   - 最终得到：fibonacci(3) = 2\n\n4. 注意事项：\n   - 这是一个简单但不够优化的实现\n   - 对于大的n值可能会有性能问题\n   - 实际应用中通常使用迭代或动态规划方法"
    }
  ]
}
